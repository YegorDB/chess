!function e(t,s,i){function r(a,n){if(!s[a]){if(!t[a]){var h="function"==typeof require&&require;if(!n&&h)return h(a,!0);if(o)return o(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var u=s[a]={exports:{}};t[a][0].call(u.exports,(function(e){return r(t[a][1][e]||e)}),u,u.exports,e,t,s,i)}return s[a].exports}for(var o="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,t,s){const{Piece:i,King:r}=e("../pieces/main");class o{constructor(){for(let e of i.ALL_COLORS)this[e]=null}*[Symbol.iterator](){for(let e of i.ALL_COLORS)this[e]&&(yield this[e])}setItem(e){if(!(e instanceof r))throw Error("King instance expected.");if(this[e.color])throw Error(e.color+" king is already exists.");this[e.color]=e}}class a{static VALUES_CHOICES=[0,.5,1];constructor(){this._value=null}get value(){return this._value}setValue(e,t){if(!a.VALUES_CHOICES.includes(e)||!a.VALUES_CHOICES.includes(t))throw Error(`Wrong points value. Try one of ${a.VALUES_CHOICES}.`);this._value=[e,t]}}t.exports={BoardTransformation:class{constructor(){this.refreshSquareNames()}get fromSquareName(){return this._fromSquareName}get toSquareName(){return this._toSquareName}get on(){return null!==this.fromSquareName&&null!==this.toSquareName}setSquaresNames(e,t){this._fromSquareName=e,this._toSquareName=t}refreshSquareNames(){this._fromSquareName=null,this._toSquareName=null}},BoardKings:o,BoardResult:a}},{"../pieces/main":17}],2:[function(e,t,s){const{Piece:i}=e("../pieces/main");class r{static PRIORITIES={[i.WHITE]:[0,1],[i.BLACK]:[1,0]};static ALL=[i.WHITE,i.BLACK];constructor(){this._priority=null}get firstPriority(){return this._checkWasSetted(),this._priority[0]}get secondPriority(){return this._checkWasSetted(),this._priority[1]}get current(){return r.ALL[this.firstPriority]}get opponent(){return r.ALL[this.secondPriority]}_checkWasSetted(){if(!this._priority)throw Error("Board color wasn't setted.")}setCurrent(e){if(!i.ALL_COLORS.includes(e))throw Error(`'${e}' is wrong color value. Use any of ${i.ALL_COLORS}.`);this._priority=r.PRIORITIES[e]}changePriority(){this._priority=[this.secondPriority,this.firstPriority]}}t.exports={BoardColors:r}},{"../pieces/main":17}],3:[function(e,t,s){class i{constructor(e){this._value=null}get value(){return this._value}set value(e){if("number"!=typeof e)throw Error("Count need to be an number.");if(e<0)throw Error("Count need to be positive number.");this._value=e}update(){this._checkValueWasSetted(),this._value++}_checkValueWasSetted(){if(null===this._value)throw Error("Value need to be setted.")}}t.exports={MovesCounter:i,FiftyMovesRuleCounter:class extends i{constructor(){super(),this._turnedOn=!1,this._needToRefresh=!1}switch(){this._checkValueWasSetted(),this._turnedOn=!0,this._needToRefresh=!0}update(){this._checkValueWasSetted(),this._turnedOn&&(this._needToRefresh?(this._value=0,this._needToRefresh=!1):this._value++)}}}},{}],4:[function(e,t,s){const{Piece:i,KingCastleRoad:r}=e("../pieces/main"),{Relation:o}=e("../relations"),{SquareName:a}=e("../square");class n{static PIECES={[i.WHITE]:{[i.PAWN]:"P",[i.KNIGHT]:"N",[i.BISHOP]:"B",[i.ROOK]:"R",[i.QUEEN]:"Q",[i.KING]:"K"},[i.BLACK]:{[i.PAWN]:"p",[i.KNIGHT]:"n",[i.BISHOP]:"b",[i.ROOK]:"r",[i.QUEEN]:"q",[i.KING]:"k"}};static COLORS={[i.WHITE]:"w",[i.BLACK]:"b"};static CASTLE_RIGHTS={[i.WHITE]:{[r.SHORT]:"K",[r.LONG]:"Q"},[i.BLACK]:{[r.SHORT]:"k",[r.LONG]:"q"}};constructor(e){this._board=e,this.value=[this._getPositionData(),n.COLORS[e.colors.current],this._getCastleRightsData(),e.enPassantSquare?e.enPassantSquare.name.value:"-",e.fiftyMovesRuleCounter.value.toString(),e.movesCounter.value.toString()].join(" ")}_getPositionData(){let e=[];for(let t of a.numbers){let s=[];for(let e of a.symbols){let i=this._board.squares[`${e}${t}`];i.piece?s.push(n.PIECES[i.piece.color][i.piece.kind]):s.push("0")}e.push(s.join("").replace(/0+/g,e=>e.length))}return e.reverse().join("/")}_getCastleRightsData(){let e=[];for(let t of this._board.kings)for(let s of r.ALL_SIDES)t.castle[s]&&e.push(n.CASTLE_RIGHTS[t.color][s]);return e.join("")||"-"}}t.exports={FENData:class{constructor(e){[this.positionData,this.currentColorData,this.castleRightsData,this.enPassantData,this.fiftyMovesRuleData,this.movesCounterData]=e.split(" ")}},FENDataCreator:n}},{"../pieces/main":17,"../relations":21,"../square":22}],5:[function(e,t,s){const{Piece:i,KingCastleRoad:r,KingCastleInitial:o}=e("../pieces/main"),{Square:a}=e("../square");class n{static PIECES={P:[i.WHITE,i.PAWN],N:[i.WHITE,i.KNIGHT],B:[i.WHITE,i.BISHOP],R:[i.WHITE,i.ROOK],Q:[i.WHITE,i.QUEEN],K:[i.WHITE,i.KING],p:[i.BLACK,i.PAWN],n:[i.BLACK,i.KNIGHT],b:[i.BLACK,i.BISHOP],r:[i.BLACK,i.ROOK],q:[i.BLACK,i.QUEEN],k:[i.BLACK,i.KING]};constructor(e){for(let e of i.ALL_COLORS)this[e]=[];this._rows=this._getRows(e),this._fillData()}_getRows(e){return e.replace(/\d/g,e=>"0".repeat(parseInt(e))).split("/").reverse()}_fillData(){for(let e=0;e<8;e++)for(let t=0;t<8;t++){if("0"==this._rows[e][t])continue;let[s,i]=n.PIECES[this._rows[e][t]],r=a.coordinatesToName(t,e);this[s].push([i,r])}}}class h{static WHITE_SHORT="K";static WHITE_LONG="Q";static BLACK_SHORT="k";static BLACK_LONG="q";static ALL_SIGNS=[h.WHITE_SHORT,h.WHITE_LONG,h.BLACK_SHORT,h.BLACK_LONG];static VALUES={[h.WHITE_SHORT]:[i.WHITE,r.SHORT],[h.WHITE_LONG]:[i.WHITE,r.LONG],[h.BLACK_SHORT]:[i.BLACK,r.SHORT],[h.BLACK_LONG]:[i.BLACK,r.LONG]};constructor(e="-"){this._signs=e.slice(0,4),this._fillData()}_checkSign(e){if(!h.ALL_SIGNS.includes(e))throw Error(`"${e}" is not a correct castle rights sign. Use one of ${h.ALL_SIGNS}.`)}_getRoadKinds(){let e={};for(let t of i.ALL_COLORS)e[t]=[];for(let t of this._signs){if("-"==t)continue;this._checkSign(t);let[s,i]=h.VALUES[t];e[s].push(i)}return e}_fillData(){let e=this._getRoadKinds();for(let t of i.ALL_COLORS)this[t]=new o(e[t])}}class l{static COLORS={w:i.WHITE,b:i.BLACK};constructor(e){this.position=new n(e.positionData),this.currentColor=l.COLORS[e.currentColorData],this.castleRights=new h(e.castleRightsData),this.enPassantSquareName="-"==e.enPassantData?null:e.enPassantData,this.fiftyMovesRuleCounter=parseInt(e.fiftyMovesRuleData),this.movesCounter=parseInt(e.movesCounterData)}}t.exports={BoardInitialPosition:n,BoardInitialCastle:h,BoardInitial:l}},{"../pieces/main":17,"../square":22}],6:[function(e,t,s){const{BoardTransformation:i,BoardKings:r,BoardResult:o}=e("./base"),{BoardColors:a}=e("./colors"),{MovesCounter:n,FiftyMovesRuleCounter:h}=e("./counters"),{FENData:l,FENDataCreator:u}=e("./fen"),{BoardInitialPosition:c,BoardInitialCastle:_,BoardInitial:d}=e("./initial"),{BoardSquares:g}=e("./squares"),{BoardEnPassantSquareValidator:f,BoardPiecesCountValidator:S,BoardPawnsPlacementValidator:p,BoardKingPlacementValidator:q,BoardInsufficientMaterialPiecesValidator:C}=e("./validators"),{Piece:L,Pawn:m,Knight:P,Bishop:R,Rook:E,Queen:I,King:k}=e("../pieces/main"),{Relation:A}=e("../relations");class T{static EMPTY_FEN="8/8/8/8/8/8/8/8 w - - 0 1";static INITIAL_FEN="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";static PIECES_BOX={[L.PAWN]:m,[L.KNIGHT]:P,[L.BISHOP]:R,[L.ROOK]:E,[L.QUEEN]:I,[L.KING]:k};constructor(e=T.EMPTY_FEN){this._squares=new g(this),this._result=new o,this._transformation=new i,this._kings=new r,this._positionIsLegal=!1,this._positionIsSetted=!1,this._colors=new a,this._initialCastleRights=null,this._enPassantSquare=null,this._fiftyMovesRuleCounter=new h,this._movesCounter=new n,this._latestFEN=e,this._init(e)}get squares(){return this._squares}get positionIsSetted(){return this._positionIsSetted}get transformation(){return this._transformation}get colors(){return this._colors}get kings(){return this._kings}get enPassantSquare(){return this._enPassantSquare}get fiftyMovesRuleCounter(){return this._fiftyMovesRuleCounter}get movesCounter(){return this._movesCounter}get FEN(){return new u(this).value}get allPieces(){return Object.values(this._squares.occupied).map(e=>e.piece)}get insufficientMaterial(){return this._positionIsLegal&&new C(this.allPieces).isLegal}get state(){return{positionIsLegal:this._positionIsLegal,FEN:this.FEN,insufficientMaterial:this.insufficientMaterial,transformation:this._transformation.on,result:this._result.value}}_init(e){let t=new d(new l(e));this._setCurrentColor(t.currentColor),this._setCastleRights(t.castleRights),this._setEnPassantSquare(t.enPassantSquareName),this._setFiftyMovesRuleCounter(t.fiftyMovesRuleCounter),this._setMovesCounter(t.movesCounter),this._setPosition(t.position)}_refreshState(){this._transformation.refreshSquareNames(),this._enPassantSquare=null}_checkCheckersIsLegal(e,t){return e.checkers.isLegal&&(!e.checkers.exist||e.hasColor(t?this._colors.opponent:this._colors.current))}_checkPositionIsLegal(e=!1){this._positionIsLegal=!0;let t=this.allPieces;for(let s of L.ALL_COLORS){let i=this._kings[s];if(this._positionIsLegal=new S(t,s).isLegal&&new q(i).isLegal&&this._checkCheckersIsLegal(i,e),!this._positionIsLegal)return}this._positionIsLegal=new p(t).isLegal&&new f(this._enPassantSquare).isLegal}_placePiece(e,t,s){new T.PIECES_BOX[t](e,this._squares[s],!1)}_removePiece(e){this._squares[e].removePiece(!1)}_replacePiece(e,t,s,i=!0){e.removePiece(!1),s.getPlace(t,i)}_markPositionAsSetted(){return this.refreshAllSquares(),this._positionIsLegal?(this._positionIsSetted=!0,this._responseAction()):(this._positionIsSetted=!1,this._responseFailAction("The position is illegal."))}_setPosition(e){if(this._positionIsSetted)return this._responsePositionAlreadySetted();if(!(e instanceof c))return this._responseFailAction("Position data has to be an instance of BoardInitialPosition.");this.squares.removePieces(!1);for(let t of L.ALL_COLORS){let s=e[t];for(let[e,i]of s.filter(e=>e[0]!=L.KING))this._placePiece(t,e,i);for(let[e,i]of s.filter(e=>e[0]==L.KING))this._placePiece(t,e,i)}return this._markPositionAsSetted()}_setCurrentColor(e){if(this._positionIsSetted)return this._responsePositionAlreadySetted();try{this._colors.setCurrent(e)}catch(e){return this._responseFailAction(e.message)}return this._responseAction()}_setCastleRights(e){if(this._positionIsSetted)return this._responsePositionAlreadySetted();if(!(e instanceof _))return this._responseFailAction("Setted data has to be an instance of BoardInitialCastle.");this._initialCastleRights=e;for(let t of this._kings)t.setCastle(e[t.color]);return this._responseAction()}_rookCastleMove(e){let t=e.rook.square.name.value,s=e.rookToSquare.name.value;this.movePiece(t,s,!1)}_setEnPassantSquare(e){if(this._positionIsSetted)return this._responsePositionAlreadySetted();if(e){let t=Object.keys(this.squares);if(!t.includes(e))return this._responseFailAction(`"${e}" is wrong square name. Try one of ${t}.`);this._enPassantSquare=this.squares[e]}else this._enPassantSquare=null;return this._responseAction()}_handleEnPassant(e,t,s){if(1==t.getBetweenSquaresCount(e))this._enPassantSquare=this._squares.getFromCoordinates(t.coordinates.x,t.coordinates.y-s.direction);else if(s.squares.includes(A.ATTACK,t)&&!t.piece){let s=t.coordinates.x,i=e.coordinates.y;this._removePiece(this._squares.getFromCoordinates(s,i).name.value)}}_setCounterValue(e,t){if(this._positionIsSetted)return this._responsePositionAlreadySetted();try{e.value=t}catch(e){return this._responseFailAction(e.message)}return this._responseAction()}_setFiftyMovesRuleCounter(e){return this._setCounterValue(this._fiftyMovesRuleCounter,e)}_setMovesCounter(e){return this._setCounterValue(this._movesCounter,e)}_updateCounters(){this._fiftyMovesRuleCounter.update(),this._colors.current==L.WHITE&&this._movesCounter.update()}_rollBack(){this._positionIsSetted=!1,this._kings=new r,this._init(this._latestFEN)}_moveEnd(){return this.refreshAllSquares(!0),this._positionIsLegal?(this._colors.changePriority(),this._updateCounters(),this._latestFEN=this.FEN,this._response()):(this._rollBack(),this._responseFail("The position would be illegal after that."))}placeKing(e){return this._kings.setItem(e),this._initialCastleRights&&this._initialCastleRights[e.color]&&e.setCastle(this._initialCastleRights[e.color]),this._response()}refreshAllSquares(e=!1){for(let e of this.allPieces)e.setInitState();for(let e of this.allPieces.filter(e=>!e.isKing))e.getSquares();for(let e of this.allPieces.filter(e=>e.binder))e.getBind(this._kings[e.color].square);for(let e of this.allPieces.filter(e=>e.isKing))e.getSquares();return this._checkPositionIsLegal(e),this._setResultIfNeeded(),this._response()}_setResultIfNeeded(){let e=this._positionIsSetted?this._colors.opponent:this._colors.current,t=this._kings[e];if(t)if(this._checkFinalKingAttack(t)||this._checkFinalKingDoubleAttack(t)){let e=this._positionIsSetted?this._colors.firstPriority:this._colors.secondPriority,t=this._positionIsSetted?this._colors.secondPriority:this._colors.firstPriority;this._result.setValue(t,e)}else(this.insufficientMaterial||this._checkPiecesHaveNoMoves(e))&&this._result.setValue(.5,.5)}_checkFinalKingAttack(e){if(!e.checkers.single)return!1;let t=e.checkers.first,s=t.isLinear?t.square.getBetweenSquaresNames(e.square):[];for(let i of this.allPieces.filter(t=>t.sameColor(e)))if(i.getCheck(t,s),!i.stuck)return!1;return!0}_checkFinalKingDoubleAttack(e){if(!e.checkers.several)return!1;for(let t of this.allPieces.filter(t=>t.sameColor(e)&&!t.isKing))t.getTotalImmobilize();return e.stuck}_checkPiecesHaveNoMoves(e){return 0==this.allPieces.filter(t=>t.hasColor(e)&&!t.stuck).length}markPositionAsSetted(){return this._responseByResult(this._markPositionAsSetted())}setPosition(e){return this._responseByResult(this._setPosition(e))}setCurrentColor(e){return this._responseByResult(this._setCurrentColor(e))}setCastleRights(e){return this._responseByResult(this._setCastleRights(e))}setEnPassantSquare(e){return this._responseByResult(this._setEnPassantSquare(e))}setFiftyMovesRuleCounter(e){return this._responseByResult(this._setFiftyMovesRuleCounter(e))}setMovesCounter(e){return this._responseByResult(this._setMovesCounter(e))}pawnTransformation(e){return L.ALL_PAWN_TRANSFORM.includes(e)?this._positionIsSetted?this._result.value?this._responseFail("The result is already reached."):(this._checkPositionIsLegal(),this._positionIsLegal?this._transformation.on?(this._placePiece(this._colors.current,e,this._transformation.toSquareName),this._removePiece(this._transformation.fromSquareName),this._refreshState(),this._fiftyMovesRuleCounter.switch(),this._moveEnd()):this._responseFail("There isn't transformation."):this._responseFail("The position isn't legal.")):this._responseFail("The position isn't setted."):this._responseFail("Wrong piece kind.")}placePiece(e,t,s){return this._positionIsSetted?this._responsePositionAlreadySetted():(this._placePiece(e,t,s),this._response())}removePiece(e){return this._positionIsSetted?this._responsePositionAlreadySetted():(this._removePiece(e),this._response())}movePiece(e,t,s=!0){if(!this._positionIsSetted)return this._responseFail("The position isn't setted.");if(this._result.value)return this._responseFail("The result is already reached.");if(this._checkPositionIsLegal(),!this._positionIsLegal)return this._responseFail("The position isn't legal.");let i=this._squares[e],r=this._squares[t],o=i.piece;if(!o)return this._responseFail("There isn't a piece to replace.");if(!o.hasColor(this._colors.current))return this._responseFail("Wrong color piece.");if(!o.canBeReplacedTo(r))return this._responseFail("Illegal move.");if(this._refreshState(),o.isKing){let e=o.castle.getRoad(r);e&&this._rookCastleMove(e),o.castle.stop()}else if(o.isRook)o.castleRoad&&this._kings[o.color].castle.stop(o.castleRoad.side);else if(o.isPawn){if(r.onEdge.up||r.onEdge.down)return this._transformation.setSquaresNames(e,t),this._response(`Pawn is ready to transform on ${t} square.`);this._handleEnPassant(i,r,o)}return this._replacePiece(i,r,o,!1),(o.isPawn||o.squares.includes(A.ATTACK,r))&&this._fiftyMovesRuleCounter.switch(),s?this._moveEnd():void 0}_responseByResult(e){return this._response(e.description,e.success)}_responseFail(e){return this._response(e,!1)}_response(e="",t=!0){return Object.assign(this.state,this._responseAction(e,t))}_responsePositionAlreadySetted(){this._responseFailAction("Position has been already setted.")}_responseFailAction(e){return this._responseAction(e,!1)}_responseAction(e="",t=!0){return{success:t,description:e}}}t.exports={Board:T,BoardColors:a,BoardInitial:d,BoardInitialCastle:_,BoardInitialPosition:c,BoardSquares:g,FENData:l,FENDataCreator:u,FiftyMovesRuleCounter:h,MovesCounter:n}},{"../pieces/main":17,"../relations":21,"./base":1,"./colors":2,"./counters":3,"./fen":4,"./initial":5,"./squares":7,"./validators":8}],7:[function(e,t,s){const{Square:i,SquareName:r}=e("../square");t.exports={BoardSquares:class{constructor(e){this._items=[];for(let t of r.symbols)for(let s of r.numbers){let r=`${t}${s}`,o=new i(r,e);this[r]=o,this._items.push(o)}}get occupied(){return Object.fromEntries(Object.entries(this).filter(e=>e[1].piece))}getFromCoordinates(e,t){return this[i.coordinatesToName(e,t)]}removePieces(e){for(let t of this._items)t.removePiece(e)}}}},{"../square":22}],8:[function(e,t,s){const{Piece:i}=e("../pieces/main"),{Relation:r}=e("../relations");t.exports={BoardEnPassantSquareValidator:class{constructor(e){this._square=e,this.isLegal=!e||!e.piece&&(e.onRank(3)&&this._checkThirdRank()||e.onRank(6)&&this._checkSixthRank())}_checkThirdRank(){return!this._square.neighbors.down.piece&&this._square.neighbors.up.piece&&this._square.neighbors.up.piece.isPawn&&this._square.neighbors.up.piece.hasColor(i.WHITE)}_checkSixthRank(){return!this._square.neighbors.up.piece&&this._square.neighbors.down.piece&&this._square.neighbors.down.piece.isPawn&&this._square.neighbors.down.piece.hasColor(i.BLACK)}},BoardPiecesCountValidator:class{constructor(e,t){this._pieces=e,this._color=t,this.isLegal=this._checkKingsCount()&&this._checkQueensCount()&&this._checkRooksCount()&&this._checkBishopsCount()&&this._checkKnightsCount()&&this._checkPawnsCount()}_checkKingsCount(){return 1==this._pieces.filter(e=>e.isKing&&e.hasColor(this._color)).length}_checkQueensCount(){return this._pieces.filter(e=>e.isQueen&&e.hasColor(this._color)).length<=9}_checkRooksCount(){return this._pieces.filter(e=>e.isRook&&e.hasColor(this._color)).length<=10}_checkBishopsCount(){return this._pieces.filter(e=>e.isBishop&&e.hasColor(this._color)).length<=10}_checkKnightsCount(){return this._pieces.filter(e=>e.isKnight&&e.hasColor(this._color)).length<=10}_checkPawnsCount(){return this._pieces.filter(e=>e.isPawn&&e.hasColor(this._color)).length<=8}},BoardPawnsPlacementValidator:class{constructor(e){this.isLegal=0==e.filter(e=>e.isPawn&&(e.square.onEdge.up||e.square.onEdge.down)).length}},BoardKingPlacementValidator:class{constructor(e){this.isLegal=!e.squares[r.ATTACK]||0==e.squares[r.ATTACK].filter(e=>e.piece.isKing).length}},BoardInsufficientMaterialPiecesValidator:class{constructor(e){this._pieces=e,this.isLegal=this._checkPawnsAndRooksAndQueensCount()&&this._checkBishopsAndKnightsCount()}_checkPawnsAndRooksAndQueensCount(){return 0==this._pieces.filter(e=>e.isPawn||e.isRook||e.isQueen).length}_checkBishopsAndKnightsCount(){let e=this._pieces.filter(e=>e.isBishop||e.isKnight);return e.length<2||0==e.filter(e=>e.isKnight)&&(0==e.filter(e=>e.square.isLight).length||0==e.filter(e=>!e.square.isLight).length)}}}},{"../pieces/main":17,"../relations":21}],9:[function(e,t,s){window.chessstuff=e("./main")},{"./main":10}],10:[function(e,t,s){t.exports={board:e("./board/main"),pieces:e("./pieces/main"),relations:e("./relations"),square:e("./square")}},{"./board/main":6,"./pieces/main":17,"./relations":21,"./square":22}],11:[function(e,t,s){const{Relation:i,PieceSquares:r}=e("../relations"),{SquareCoordinates:o}=e("../square");class a{static WHITE="white";static BLACK="black";static ALL_COLORS=[a.WHITE,a.BLACK];static PAWN="pawn";static KNIGHT="knight";static BISHOP="bishop";static ROOK="rook";static QUEEN="queen";static KING="king";static ALL_KINDS=[a.PAWN,a.KNIGHT,a.BISHOP,a.ROOK,a.QUEEN,a.KING];static ALL_LINEARS=[a.BISHOP,a.ROOK,a.QUEEN];static ALL_PAWN_TRANSFORM=[a.KNIGHT,a.BISHOP,a.ROOK,a.QUEEN];constructor(e,t,s=null,i=!0){this.color=e,this.kind=s,this._isLinear=a.ALL_LINEARS.includes(s),this.squares=new r(this),this._refreshSquareFinder(),this.setInitState(),this.getPlace(t,i)}get color(){return this._color}set color(e){if(!a.ALL_COLORS.includes(e))throw Error(`'${e}' is wrong piece color value. Use any of Piece.ALL_COLORS.`);this._color=e}get stuck(){return!this.squares[i.MOVE]&&!this.squares[i.ATTACK]}get kind(){return this._kind}set kind(e){if(null!=e&&!a.ALL_KINDS.includes(e))throw Error(`'${e}' is wrong piece kind value. Use any of Piece.ALL_KINDS.`);this._kind=e}get isLinear(){return this._isLinear}get board(){return this.square.board}get isPawn(){return this.kind==a.PAWN}get isKnight(){return this.kind==a.KNIGHT}get isBishop(){return this.kind==a.BISHOP}get isRook(){return this.kind==a.ROOK}get isQueen(){return this.kind==a.QUEEN}get isKing(){return this.kind==a.KING}_refreshSquareFinder(){this.sqrBeforeXray=null,this.xrayControl=!1,this.endOfALine=!1}_refreshSquares(){this.squares.refresh(),this._refreshSquareFinder()}_nextSquareAction(e){if(this.sqrBeforeXray){if(this.squares.add(i.XRAY,e),this.xrayControl&&(this.squares.add(i.CONTROL,e),this.xrayControl=!1),e.piece){let t=e.piece.isKing&&!this.sameColor(e.piece),s=!this.sameColor(this.sqrBeforeXray.piece);t&&s&&(this.sqrBeforeXray.piece.binder=this),this.endOfALine=!0}}else e.piece?(this.sameColor(e.piece)?this.squares.add(i.COVER,e):(this.squares.add(i.ATTACK,e),e.piece.isKing&&(e.piece.checkers.add(this.square.piece),this.xrayControl=!0)),this.squares.add(i.CONTROL,e),this.isLinear&&(this.sqrBeforeXray=e)):(this.squares.add(i.MOVE,e),this.squares.add(i.CONTROL,e))}getSquares(){}setInitState(){this.binder=null}getPlace(e,t=!0){this.square=e,e.placePiece(this,t)}theSame(e){return this.square.theSame(e.square)}sameColor(e){return this.color===e.color}hasColor(e){return this.color===e}canBeReplacedTo(e){return!e.piece&&this.squares.includes(i.MOVE,e)||!!e.piece&&!e.piece.isKing&&!this.sameColor(e.piece)&&this.squares.includes(i.ATTACK,e)}getTotalImmobilize(){for(let e of[i.MOVE,i.ATTACK,i.COVER])this.squares.refresh(e)}getBind(e){this.squares.refresh(i.XRAY);let t=this.binder.square.getBetweenSquaresNames(e,!0,!0);for(let e of[i.MOVE,i.ATTACK,i.COVER])this.squares.limit(e,t)}getCheck(e,t){this.squares.refresh(i.COVER),this.squares.refresh(i.XRAY),this.squares.limit(i.ATTACK,[e.square.name.value]),this.squares.limit(i.MOVE,t)}}t.exports={Piece:a,StepPiece:class extends a{constructor(e,t,s,i=!0){super(e,t,s,i)}_getStepSquares(e){this._refreshSquareFinder();for(let t of e){let e=this.square.coordinates.x+t.x,s=this.square.coordinates.y+t.y;o.correctCoordinates(e,s)&&this._nextSquareAction(this.board.squares.getFromCoordinates(e,s))}}},LinearPiece:class extends a{constructor(e,t,s,i=!0){super(e,t,s,i)}_getLinearSquares(e){for(let t of e){this._refreshSquareFinder();let e=this.square.coordinates.x+t.x,s=this.square.coordinates.y+t.y;for(;o.correctCoordinates(e,s)&&(this._nextSquareAction(this.board.squares.getFromCoordinates(e,s)),!this.endOfALine);)e+=t.x,s+=t.y}}}}},{"../relations":21,"../square":22}],12:[function(e,t,s){const{Piece:i,LinearPiece:r}=e("./base");class o extends r{static directions=[{x:-1,y:1},{x:1,y:1},{x:1,y:-1},{x:-1,y:-1}];constructor(e,t,s=!0){super(e,t,i.BISHOP,s)}getSquares(){this._refreshSquares(),this._getLinearSquares(o.directions)}}t.exports={Bishop:o}},{"./base":11}],13:[function(e,t,s){const{Piece:i}=e("../base"),{Relation:r}=e("../../relations");class o{static SHORT="short";static LONG="long";static ALL_SIDES=[o.SHORT,o.LONG];static toSquaresSigns={[o.SHORT]:"g",[o.LONG]:"c"};static rookToSquaresSigns={[o.SHORT]:"f",[o.LONG]:"d"};static rookSquaresSigns={[o.SHORT]:"h",[o.LONG]:"a"};static freeSigns={[o.SHORT]:["f","g"],[o.LONG]:["b","c","d"]};static safeSigns={[o.SHORT]:["f","g"],[o.LONG]:["c","d"]};constructor(e,t,s){this._castle=e,this._rank=t,this._side=s;let i=`${o.toSquaresSigns[s]}${this._rank}`;this._toSquare=e.king.board.squares[i];let r=`${o.rookToSquaresSigns[s]}${this._rank}`;this._rookToSquare=e.king.board.squares[r];let a=`${o.rookSquaresSigns[s]}${this._rank}`;this._rook=e.king.board.squares[a].piece,this._checkRook(),this._rook.setCastleRoad(this),this._needToBeFreeSquares=[],this._needToBeSafeSquares=[],this._fill()}get toSquare(){return this._toSquare}get rookToSquare(){return this._rookToSquare}get rook(){return this._rook}get side(){return this._side}get isFree(){return 0==this._needToBeFreeSquares.filter(e=>e.piece).length}get isSafe(){for(let e of this._needToBeSafeSquares){if(e.pieces[r.CONTROL]&&e.pieces[r.CONTROL].filter(e=>!e.hasColor(this._castle.king.color)).length>0)return!1}return!0}get isLegal(){return this.isFree&&this.isSafe}_checkRook(){if(!this._rook||!this._rook.isRook||!this._castle.king.sameColor(this._rook))throw Error(`Fail to assign rook to ${this._castle.king.color} king ${this._side} castle road.`)}_fill(){let e=[[this._needToBeFreeSquares,o.freeSigns[this._side]],[this._needToBeSafeSquares,o.safeSigns[this._side]]];for(let[t,s]of e)for(let e of s)t.push(this._castle.king.board.squares[`${e}${this._rank}`])}}class a{constructor(e=null){e=(e||[]).slice(0,2),this._checkAcceptedSides(e);for(let t of o.ALL_SIDES)this[t]=e.includes(t)}_checkAcceptedSides(e){for(let t of e)if(!o.ALL_SIDES.includes(t))throw Error(`${t} is not a correct castle side name. Use one of ${o.ALL_SIDES}.`)}}class n{static RANKS={[i.WHITE]:"1",[i.BLACK]:"8"};constructor(e,t=null){let s;if(this._king=e,e.onInitialSquare&&t){if(!t instanceof a)throw Error("Castle initial data has to be an instance of KingCastleInitial.");s=t}else s=new a;for(let t of o.ALL_SIDES)s[t]?this[t]=new o(this,n.RANKS[e.color],t):this[t]=null}get king(){return this._king}stop(e="all"){let t="all"==e?o.ALL_SIDES:[e];for(let e of t)this[e]&&(this[e].rook.removeCastleRoad(),this[e]=null)}getRoad(e){for(let t of o.ALL_SIDES)if(this[t]&&this[t].toSquare.theSame(e))return this[t];return null}}t.exports={KingCastleRoad:o,KingCastleInitial:a,KingCastle:n}},{"../../relations":21,"../base":11}],14:[function(e,t,s){const{Relation:i}=e("../../relations");t.exports={KingCheckers:class extends Array{constructor(e){super(),this._king=e}get first(){return this.length>0?this[0]:null}get second(){return 2==this.length?this[1]:null}get exist(){return this.length>0}get single(){return 1==this.length}get several(){return 2==this.length}get isLegal(){return!this.exist||this._isPiecesLegal()&&(this.single||this.several&&this._isSeveralLegal())}_isPiecesLegal(){return 0==this.filter(e=>e.isKing).length&&0==this.filter(e=>!e.squares.includes(i.CONTROL,this._king.square)).length}_isDiscoverLegal(e,t){if(!t.isLinear)return!1;let s=t.square.getBetweenSquaresNames(this._king.square);for(let t of s){let s=this._king.board.squares[t];if(!s.piece&&e.squares.includes(i.CONTROL,s))return!0}return!1}_isSeveralLegal(){return this._isDiscoverLegal(this.first,this.second)||this._isDiscoverLegal(this.second,this.first)}add(e){this.push(e)}}}},{"../../relations":21}],15:[function(e,t,s){const{KingCastleRoad:i,KingCastleInitial:r,KingCastle:o}=e("./castle"),{KingCheckers:a}=e("./checkers"),{Piece:n,StepPiece:h}=e("../base"),{Relation:l}=e("../../relations");class u extends h{static stepPoints=[{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1},{x:-1,y:0}];static INITIAL_SQUARE_NAMES={[n.WHITE]:"e1",[n.BLACK]:"e8"};constructor(e,t,s=!0){super(e,t,n.KING,s)}get onInitialSquare(){return this.square.name.value==u.INITIAL_SQUARE_NAMES[this.color]}_removeEnemyControlledSquares(){for(let e of[l.MOVE,l.ATTACK]){if(!this.squares[e])continue;let t=[];for(let s of this.squares[e])s.pieces[l.CONTROL].filter(e=>!this.sameColor(e)).length>0&&t.push(s);for(let s of t)this.squares.remove(e,s)}}_addCastleMoves(){for(let e of i.ALL_SIDES)this.castle[e]&&this.castle[e].isLegal&&this.squares.add(l.MOVE,this.castle[e].toSquare)}_removeCastleMoves(){for(let e of i.ALL_SIDES)this.castle[e]&&this.squares.remove(l.MOVE,this.castle[e].toSquare)}setInitState(){this.checkers=new a(this)}getSquares(){this._refreshSquares(),this._getStepSquares(u.stepPoints),this._removeEnemyControlledSquares(),this._addCastleMoves()}getCheck(){this._removeCastleMoves()}setCastle(e){this.castle=new o(this,e)}}t.exports={KingCastleRoad:i,KingCastleInitial:r,KingCastle:o,KingCheckers:a,King:u}},{"../../relations":21,"../base":11,"./castle":13,"./checkers":14}],16:[function(e,t,s){const{Piece:i,StepPiece:r}=e("./base");class o extends r{static stepPoints=[{x:-2,y:1},{x:-1,y:2},{x:1,y:2},{x:2,y:1},{x:2,y:-1},{x:1,y:-2},{x:-1,y:-2},{x:-2,y:-1}];constructor(e,t,s=!0){super(e,t,i.KNIGHT,s)}getSquares(){this._refreshSquares(),this._getStepSquares(o.stepPoints)}getBind(){this.getTotalImmobilize()}}t.exports={Knight:o}},{"./base":11}],17:[function(e,t,s){const{Piece:i,StepPiece:r,LinearPiece:o}=e("./base"),{Pawn:a}=e("./pawn"),{Knight:n}=e("./knight"),{Bishop:h}=e("./bishop"),{Rook:l}=e("./rook"),{Queen:u}=e("./queen"),{KingCastleRoad:c,KingCastleInitial:_,KingCastle:d,KingCheckers:g,King:f}=e("./king/main");t.exports={Piece:i,StepPiece:r,LinearPiece:o,Pawn:a,Knight:n,Bishop:h,Rook:l,Queen:u,KingCastleRoad:c,KingCastleInitial:_,KingCastle:d,KingCheckers:g,King:f}},{"./base":11,"./bishop":12,"./king/main":15,"./knight":16,"./pawn":18,"./queen":19,"./rook":20}],18:[function(e,t,s){const{Piece:i}=e("./base"),{Relation:r}=e("../relations");class o extends i{static DIRECTIONS={[i.WHITE]:1,[i.BLACK]:-1};static INITIAL_RANKS={[i.WHITE]:"2",[i.BLACK]:"7"};constructor(e,t,s=!0){if(t.onEdge.up||t.onEdge.down)throw Error(`Pawn couldn't be placed on ${t.name.value} square.`);super(e,t,i.PAWN,s)}get direction(){return o.DIRECTIONS[this.color]}get onInitialRank(){return this.square.onRank(o.INITIAL_RANKS[this.color])}getSquares(){this._refreshSquares(),this._getMoveSquares(),this._getAttackSquares()}_getMoveSquares(){for(let[e,t]of this._getMoveCoordinates()){let s=this.board.squares.getFromCoordinates(e,t);if(s.piece)break;this.squares.add(r.MOVE,s)}}_getMoveCoordinates(){let e=[];return e.push([this.square.coordinates.x,this.square.coordinates.y+1*this.direction]),this.onInitialRank&&e.push([this.square.coordinates.x,this.square.coordinates.y+2*this.direction]),e}_getAttackSquares(){for(let[e,t]of this._getAttackCoordinates()){let s=this.board.squares.getFromCoordinates(e,t);this.squares.add(r.CONTROL,s),s.piece?this.sameColor(s.piece)?this.squares.add(r.COVER,s):(this.squares.add(r.ATTACK,s),s.piece.isKing&&s.piece.checkers.add(this.square.piece)):this._checkEnPassantSquare(s)&&(this.squares.add(r.ATTACK,s),this.squares.add(r.MOVE,s))}}_getAttackCoordinates(){let e=[];return this.square.onEdge.right||e.push([this.square.coordinates.x+1,this.square.coordinates.y+1*this.direction]),this.square.onEdge.left||e.push([this.square.coordinates.x-1,this.square.coordinates.y+1*this.direction]),e}_checkEnPassantSquare(e){return this.board.enPassantSquare&&e.theSame(this.board.enPassantSquare)&&!this.hasColor(this.board.colors.current)}}t.exports={Pawn:o}},{"../relations":21,"./base":11}],19:[function(e,t,s){const{Piece:i,LinearPiece:r}=e("./base"),{Bishop:o}=e("./bishop"),{Rook:a}=e("./rook");t.exports={Queen:class extends r{constructor(e,t,s=!0){super(e,t,i.QUEEN,s)}getSquares(){this._refreshSquares(),this._getLinearSquares(o.directions),this._getLinearSquares(a.directions)}}}},{"./base":11,"./bishop":12,"./rook":20}],20:[function(e,t,s){const{Piece:i,LinearPiece:r}=e("./base");class o extends r{static directions=[{x:0,y:1},{x:1,y:0},{x:0,y:-1},{x:-1,y:0}];constructor(e,t,s=!0){super(e,t,i.ROOK,s)}get castleRoad(){return this.hasOwnProperty("_castleRoad")?this._castleRoad:null}getSquares(){this._refreshSquares(),this._getLinearSquares(o.directions)}setCastleRoad(e){this._castleRoad=e}removeCastleRoad(){this._castleRoad=null}}t.exports={Rook:o}},{"./base":11}],21:[function(e,t,s){class i{static MOVE="move";static ATTACK="attack";static XRAY="xray";static COVER="cover";static CONTROL="control";static ALL_KINDS=[i.MOVE,i.ATTACK,i.XRAY,i.COVER,i.CONTROL];constructor(e,t){this._target=e,this._relatedName=t,this.refresh()}_checkKind(e,t=null){if(!i.ALL_KINDS.includes(e)&&t!=e)throw Error(`Wrong relation kind (${e}) passed`)}refresh(e="all"){this._checkKind(e,"all");let t="all"===e?i.ALL_KINDS:[e];for(let e of t){if(this[e])for(let t of this[e])t[this._relatedName].remove(e,this._target,!1);this[e]=null}}add(e,t,s=!0){this._checkKind(e),this[e]?this[e].push(t):this[e]=[t],s&&t[this._relatedName].add(e,this._target,!1)}remove(e,t,s=!0){this._checkKind(e),this[e]&&(this[e]=this[e].filter(e=>!e.theSame(t)),0==this[e].length&&(this[e]=null)),s&&t[this._relatedName].remove(e,this._target,!1)}includes(e,t){return this._checkKind(e),!!this[e]&&0!=this[e].filter(e=>e.theSame(t)).length}}t.exports={Relation:i,SquarePieces:class extends i{constructor(e){super(e,"squares")}},PieceSquares:class extends i{constructor(e){super(e,"pieces")}limit(e,t){if(this._checkKind(e),this[e]){for(let s of this[e].filter(e=>!t.includes(e.name.value)))s[this._relatedName].remove(e,this._target,!1);this[e]=this[e].filter(e=>t.includes(e.name.value)),0==this[e].length&&(this[e]=null)}}}}},{}],22:[function(e,t,s){const{SquarePieces:i}=e("./relations");class r{static symbols=["a","b","c","d","e","f","g","h"];static numbers=["1","2","3","4","5","6","7","8"];constructor(e){let t=e[0],s=e[1];if(!r.symbols.includes(t))throw Error(`Wrong symbol (${t}) passed. Try one of ${r.symbols}`);if(!r.numbers.includes(s))throw Error(`Wrong number (${s}) passed. Try one of ${r.numbers}`);this._symbol=t,this._number=s,this._value=`${t}${s}`}get symbol(){return this._symbol}get number(){return this._number}get value(){return this._value}}class o{static numbers=[0,1,2,3,4,5,6,7];static correctCoordinate(e){return o.numbers.includes(e)}static correctCoordinates(e,t){return o.correctCoordinate(e)&&o.correctCoordinate(t)}constructor(e){let t=e[0],s=e[1];if(!o.correctCoordinate(t))throw Error(`Wrong x value (${t}) passed. Try one of ${o.numbers}`);if(!o.correctCoordinate(s))throw Error(`Wrong y value (${s}) passed. Try one of ${o.numbers}`);this._x=t,this._y=s,this._value=[t,s]}get x(){return this._x}get y(){return this._y}get value(){return this._value}}class a{constructor(e){this._up=!1,this._right=!1,this._down=!1,this._left=!1,7==e.y?this._up=!0:0==e.y&&(this._down=!0),7==e.x?this._right=!0:0==e.x&&(this._left=!0)}get up(){return this._up}get right(){return this._right}get down(){return this._down}get left(){return this._left}}class n{constructor(e,t){if(this._dx=Math.abs(e.coordinates.x-t.coordinates.x),this._dy=Math.abs(e.coordinates.y-t.coordinates.y),this._dx!=this._dy&&0!=this._dx&&0!=this._dy)throw Error(`\n        Squares ${e.name.value} and ${t.name.value}\n        aren't located on the same line (horizontal, vertical, diagonal).\n      `);this._startSquare=e,this._endSquare=t,this._betweenSquaresNames=[],this._betweenSquaresCount=0,this._getBetweenSquaresData()}betweenSquaresNames(e=!1,t=!1){return[...e?[this._startSquare.name.value]:[],...this._betweenSquaresNames,...t?[this._endSquare.name.value]:[]]}betweenSquaresCount(e=!1,t=!1){return this._betweenSquaresCount+(e?1:0)+(t?1:0)}_getBetweenSquaresData(){let e={x:0,y:0};for(let t of["x","y"])this._startSquare.coordinates[t]>this._endSquare.coordinates[t]?e[t]=-1:this._startSquare.coordinates[t]<this._endSquare.coordinates[t]&&(e[t]=1);let t=Math.max(this._dx,this._dy);for(let s=1;s<t;s++){let t=[];for(let i of["x","y"])t.push(this._startSquare.coordinates[i]+s*e[i]);this._betweenSquaresNames.push(l.coordinatesToName(...t))}this._betweenSquaresCount=this._betweenSquaresNames.length}}class h{static UP_LEFT="upLeft";static UP="up";static UP_RIGHT="upRight";static RIGHT="right";static DOWN_RIGHT="downRight";static DOWN="down";static DOWN_LEFT="downLeft";static LEFT="left";static VALIDATE={[h.UP_LEFT]:e=>!e.onEdge.up&&!e.onEdge.left,[h.UP]:e=>!e.onEdge.up,[h.UP_RIGHT]:e=>!e.onEdge.up&&!e.onEdge.right,[h.RIGHT]:e=>!e.onEdge.right,[h.DOWN_RIGHT]:e=>!e.onEdge.down&&!e.onEdge.right,[h.DOWN]:e=>!e.onEdge.down,[h.DOWN_LEFT]:e=>!e.onEdge.down&&!e.onEdge.left,[h.LEFT]:e=>!e.onEdge.left};static DELTA={[h.UP_LEFT]:{x:-1,y:1},[h.UP]:{x:0,y:1},[h.UP_RIGHT]:{x:1,y:1},[h.RIGHT]:{x:1,y:0},[h.DOWN_RIGHT]:{x:1,y:-1},[h.DOWN]:{x:0,y:-1},[h.DOWN_LEFT]:{x:-1,y:-1},[h.LEFT]:{x:-1,y:0}};constructor(e){this._square=e}get upLeft(){return this._getSquare(h.UP_LEFT)}get up(){return this._getSquare(h.UP)}get upRight(){return this._getSquare(h.UP_RIGHT)}get right(){return this._getSquare(h.RIGHT)}get downRight(){return this._getSquare(h.DOWN_RIGHT)}get down(){return this._getSquare(h.DOWN)}get downLeft(){return this._getSquare(h.DOWN_LEFT)}get left(){return this._getSquare(h.LEFT)}_getSquare(e){if(!this._square.board||!h.VALIDATE[e](this._square))return null;let t=this._square.coordinates.x+h.DELTA[e].x,s=this._square.coordinates.y+h.DELTA[e].y,i=l.coordinatesToName(t,s);return this._square.board.squares[i]}}class l{static symbolToNumber={a:0,b:1,c:2,d:3,e:4,f:5,g:6,h:7};static numberToSymbol={0:"a",1:"b",2:"c",3:"d",4:"e",5:"f",6:"g",7:"h"};static coordinatesToName(e,t){if(!o.correctCoordinates(e,t))throw Error(`Incorrect square coordinates (x - ${e}, y - ${t}).`);return`${e=l.numberToSymbol[e]}${++t}`}constructor(e,t=null){if("string"==typeof e){this._name=new r(e);let t=l.symbolToNumber[this._name.symbol],s=parseInt(this._name.number)-1;this._coordinates=new o([t,s])}else{if(!Array.isArray(e))throw Error("Wrong identifier passed. It need to be SquareName or SquareCoordinates create param.");{this._coordinates=new o(e);let t=l.numberToSymbol[this._coordinates.x],s=this._coordinates.y+1;this._name=new r(`${t}${s}`)}}this._board=t,this._piece=null,this.pieces=new i(this),this.onEdge=new a(this.coordinates),this.neighbors=new h(this),this._isLight=this._getIsLight()}get name(){return this._name}get coordinates(){return this._coordinates}get board(){return this._board}get piece(){return this._piece}get isLight(){return this._isLight}_getIsLight(){let e=this.coordinates.x%2==0,t=this.coordinates.y%2==0;return e&&!t||!e&&t}placePiece(e,t=!0){if(this.board&&!e.canBeReplacedTo(this)){if(this.board.positionIsSetted&&(!this.board.transformation.on||this.name.value!=this.board.transformation.toSquareName))throw Error("Board position is already setted.");e.isKing&&this.board.placeKing(e)}this._piece=e,t&&this.board&&this.board.refreshAllSquares()}removePiece(e=!0){this._piece=null,e&&this.board&&this.board.refreshAllSquares()}theSame(e){return this.name.value===e.name.value}onVertical(e){return this.name.symbol===e}onRank(e){return this.name.number==e}getBetweenSquaresNames(e,t=!1,s=!1){return new n(this,e).betweenSquaresNames(t,s)}getBetweenSquaresCount(e,t=!1,s=!1){return new n(this,e).betweenSquaresCount(t,s)}}t.exports={Square:l,SquareCoordinates:o,SquareNeighbors:h,SquareName:r,SquareOnEdge:a,SquaresLine:n}},{"./relations":21}]},{},[9]);